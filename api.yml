AWSTemplateFormatVersion: 2010-09-09
Description: "API Gateway and Lambda functions to serve XRB wallets"
Parameters:
  ApiDeploymentStageName:
    Type: "String"
    Default: "main"
Outputs:
  AccountDetailsUrl:
    Value: !Sub "https://${XrbLightRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiDeploymentStageName}/account"
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "LambdaRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
  AccountDetailsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 20
      Runtime: nodejs6.10
      Code:
        ZipFile: !Sub |
          const https = require('https');

          exports.handler = function(event, context, callback) {
            const url = event.address ?
              'https://www.nanode.co/api/account?id=' + event.address :
              'https://www.nanode.co/api/block?id=' + event.block;

            https.get(url, (res) => {
              console.log(event, res.statusCode);
              if(event.address && res.statusCode !== 200 && res.statusCode !== 304) {
                console.log(event, res.statusCode);
                return callback('invalid_account');
              }

              res.setEncoding('utf8');
              let rawData = '';
              res.on('data', (chunk) => { rawData += chunk; });
              res.on('end', () => {
                if(rawData === '') return callback('not_found');
                callback(null, JSON.parse(rawData));
              });

            }).on('error', (error) => {
              callback(error);
            });
          }
  PublishLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 3
      Runtime: nodejs6.10
      Code:
        ZipFile: !Sub |
          const dgram = require('dgram');

          exports.handler = function(event, context, callback) {
            dgram.createSocket('udp4').send(Buffer.from(event.msg, 'hex'), 7075, 'rai.raiblocks.net', callback);
          }
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "LambdaRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:InvokeAsync"
                Resource: "*"
  XrbLightRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref "AWS::StackName"
  AccountDetailsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt XrbLightRestApi.RootResourceId
      PathPart: 'account'
      RestApiId: !Ref XrbLightRestApi
  AccountDetailsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref XrbLightRestApi
      ResourceId: !Ref AccountDetailsResource
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      Integration:
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: !Ref AWS::NoValue
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt AccountDetailsLambda.Arn
        Type: AWS
        IntegrationHttpMethod: 'POST'
        Credentials: !GetAtt ApiRole.Arn
        RequestTemplates:
          application/json: !Sub |
            #set($inputRoot = $input.path('$'))
            {
              "address": "$input.params('a')",
              "block": "$input.params('b')"
            }
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  PublishResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt XrbLightRestApi.RootResourceId
      PathPart: 'publish'
      RestApiId: !Ref XrbLightRestApi
  PublishGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref XrbLightRestApi
      ResourceId: !Ref PublishResource
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      Integration:
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: !Ref AWS::NoValue
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt PublishLambda.Arn
        Type: AWS
        IntegrationHttpMethod: 'POST'
        Credentials: !GetAtt ApiRole.Arn
        RequestTemplates:
          application/json: !Sub |
            #set($inputRoot = $input.path('$'))
            {
              "msg": "$input.params('msg')"
            }
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  XrbLightRestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: AccountDetailsGetMethod
    Properties:
      RestApiId: !Ref XrbLightRestApi
      StageName: !Ref ApiDeploymentStageName
